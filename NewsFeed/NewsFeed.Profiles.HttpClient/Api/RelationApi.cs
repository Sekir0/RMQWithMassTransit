/*
 * Profiles.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using NewsFeed.Profiles.HttpClient.Client;
using NewsFeed.Profiles.HttpClient.Model;

namespace NewsFeed.Profiles.HttpClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Sent friend request
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromUser">User who is sending request</param>
        /// <param name="toUser">User to whom the request was sent</param>
        /// <returns></returns>
        void RelationFromUserFriendsToUserPost(Guid fromUser, Guid toUser);

        /// <summary>
        /// Sent friend request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromUser">User who is sending request</param>
        /// <param name="toUser">User to whom the request was sent</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RelationFromUserFriendsToUserPostWithHttpInfo(Guid fromUser, Guid toUser);
        /// <summary>
        /// Search user&#39;s followers
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <returns>List&lt;Guid&gt;</returns>
        List<Guid> RelationUserFollowersGet(Guid user);

        /// <summary>
        /// Search user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<List<Guid>> RelationUserFollowersGetWithHttpInfo(Guid user);
        /// <summary>
        /// Search user&#39;s followers
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="skip">Skip followers up to a specified position (optional)</param>
        /// <param name="take">Take followers up to a specified position (optional)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        List<Guid> RelationUserSearchFollowersGet(Guid user, int? skip = default(int?), int? take = default(int?));

        /// <summary>
        /// Search user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="skip">Skip followers up to a specified position (optional)</param>
        /// <param name="take">Take followers up to a specified position (optional)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<List<Guid>> RelationUserSearchFollowersGetWithHttpInfo(Guid user, int? skip = default(int?), int? take = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Sent friend request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromUser">User who is sending request</param>
        /// <param name="toUser">User to whom the request was sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RelationFromUserFriendsToUserPostAsync(Guid fromUser, Guid toUser, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sent friend request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromUser">User who is sending request</param>
        /// <param name="toUser">User to whom the request was sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RelationFromUserFriendsToUserPostWithHttpInfoAsync(Guid fromUser, Guid toUser, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<List<Guid>> RelationUserFollowersGetAsync(Guid user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Guid>>> RelationUserFollowersGetWithHttpInfoAsync(Guid user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="skip">Skip followers up to a specified position (optional)</param>
        /// <param name="take">Take followers up to a specified position (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<List<Guid>> RelationUserSearchFollowersGetAsync(Guid user, int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="skip">Skip followers up to a specified position (optional)</param>
        /// <param name="take">Take followers up to a specified position (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Guid>>> RelationUserSearchFollowersGetWithHttpInfoAsync(Guid user, int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationApi : IRelationApiSync, IRelationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RelationApi : IRelationApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RelationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RelationApi(string basePath)
        {
            this.Configuration = HttpClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HttpClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RelationApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HttpClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HttpClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RelationApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HttpClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Sent friend request 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromUser">User who is sending request</param>
        /// <param name="toUser">User to whom the request was sent</param>
        /// <returns></returns>
        public void RelationFromUserFriendsToUserPost(Guid fromUser, Guid toUser)
        {
            RelationFromUserFriendsToUserPostWithHttpInfo(fromUser, toUser);
        }

        /// <summary>
        /// Sent friend request 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromUser">User who is sending request</param>
        /// <param name="toUser">User to whom the request was sent</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RelationFromUserFriendsToUserPostWithHttpInfo(Guid fromUser, Guid toUser)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromUser", ClientUtils.ParameterToString(fromUser)); // path parameter
            localVarRequestOptions.PathParameters.Add("toUser", ClientUtils.ParameterToString(toUser)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Relation/{fromUser}/friends/{toUser}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RelationFromUserFriendsToUserPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sent friend request 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromUser">User who is sending request</param>
        /// <param name="toUser">User to whom the request was sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RelationFromUserFriendsToUserPostAsync(Guid fromUser, Guid toUser, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RelationFromUserFriendsToUserPostWithHttpInfoAsync(fromUser, toUser, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Sent friend request 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromUser">User who is sending request</param>
        /// <param name="toUser">User to whom the request was sent</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RelationFromUserFriendsToUserPostWithHttpInfoAsync(Guid fromUser, Guid toUser, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromUser", ClientUtils.ParameterToString(fromUser)); // path parameter
            localVarRequestOptions.PathParameters.Add("toUser", ClientUtils.ParameterToString(toUser)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Relation/{fromUser}/friends/{toUser}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RelationFromUserFriendsToUserPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search user&#39;s followers 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public List<Guid> RelationUserFollowersGet(Guid user)
        {
            ApiResponse<List<Guid>> localVarResponse = RelationUserFollowersGetWithHttpInfo(user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search user&#39;s followers 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public ApiResponse<List<Guid>> RelationUserFollowersGetWithHttpInfo(Guid user)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user", ClientUtils.ParameterToString(user)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Guid>>("/Relation/{user}/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RelationUserFollowersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search user&#39;s followers 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Guid>> RelationUserFollowersGetAsync(Guid user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<Guid>> localVarResponse = await RelationUserFollowersGetWithHttpInfoAsync(user, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search user&#39;s followers 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Guid>>> RelationUserFollowersGetWithHttpInfoAsync(Guid user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user", ClientUtils.ParameterToString(user)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Guid>>("/Relation/{user}/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RelationUserFollowersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search user&#39;s followers 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="skip">Skip followers up to a specified position (optional)</param>
        /// <param name="take">Take followers up to a specified position (optional)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public List<Guid> RelationUserSearchFollowersGet(Guid user, int? skip = default(int?), int? take = default(int?))
        {
            ApiResponse<List<Guid>> localVarResponse = RelationUserSearchFollowersGetWithHttpInfo(user, skip, take);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search user&#39;s followers 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="skip">Skip followers up to a specified position (optional)</param>
        /// <param name="take">Take followers up to a specified position (optional)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public ApiResponse<List<Guid>> RelationUserSearchFollowersGetWithHttpInfo(Guid user, int? skip = default(int?), int? take = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user", ClientUtils.ParameterToString(user)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "take", take));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Guid>>("/Relation/{user}/search/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RelationUserSearchFollowersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search user&#39;s followers 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="skip">Skip followers up to a specified position (optional)</param>
        /// <param name="take">Take followers up to a specified position (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Guid>> RelationUserSearchFollowersGetAsync(Guid user, int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<Guid>> localVarResponse = await RelationUserSearchFollowersGetWithHttpInfoAsync(user, skip, take, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search user&#39;s followers 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filters by user</param>
        /// <param name="skip">Skip followers up to a specified position (optional)</param>
        /// <param name="take">Take followers up to a specified position (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Guid>>> RelationUserSearchFollowersGetWithHttpInfoAsync(Guid user, int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user", ClientUtils.ParameterToString(user)); // path parameter
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (take != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "take", take));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Guid>>("/Relation/{user}/search/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RelationUserSearchFollowersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
